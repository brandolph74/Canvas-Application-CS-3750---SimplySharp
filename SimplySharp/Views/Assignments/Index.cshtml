@model IEnumerable<SimplySharp.Models.Assignment>
@using Microsoft.AspNetCore.Identity
@using SimplySharp.Areas.Identity.Data

@inject SignInManager<SimplySharpUser> SignInManager
@inject UserManager<SimplySharpUser> UserManager


@{
    ViewData["Title"] = "Index";
    var ID = ViewBag.ID;
    string files = "";
}
@{
    TempData["classid"] = ID;
    var className = TempData["className"];
}
@if (TempData["FileUpload"] != null)
{
    files = (string)TempData["FileReferrer"];
}

@if ((string)TempData["Referrer"] == "SaveSubmission")
{
    <div class="alert alert-success">
        <strong>Your submission has been saved @files</strong>
    </div>
}

@{
    double userTotalGrade = (double)TempData["UserTotalGrade"];
    double[] classTotalGrades = (double[])TempData["ClassTotalGradeArray"];
}

<div>
    <h1 class="text-primary">@className - Assignments</h1>
    @if (((await UserManager.GetUserAsync(User)).UserType == "S"))
     {
        <h3>Total Grade: @userTotalGrade%</h3>
     }
</div>

@if (Model.Count() > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Title)
                </th>

                <th>
                    @Html.DisplayNameFor(model => model.DueDate)
                </th>

                <th>
                    @Html.DisplayNameFor(model => model.SubmissionType)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                var assignid = item.Id;
                <tr>

                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>

                    <td>
                        @Html.DisplayFor(modelItem => item.DueDate)
                    </td>

                    <td>
                        @Html.DisplayFor(modelItem => item.SubmissionType)
                    </td>
                    <td>
                        @if (((await UserManager.GetUserAsync(User)).UserType == "T"))
                        {
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-primary">Details</a>

                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-primary ">Edit</a>

                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-primary">Delete</a>

                            <a asp-controller="Submissions" asp-action="Index" asp-route-id="@assignid" class="btn btn-primary">Submissions</a>
                        }
                        @if (((await UserManager.GetUserAsync(User)).UserType == "S"))
                        {
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-primary">Details</a>

                        }


                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (((await UserManager.GetUserAsync(User)).UserType == "T"))
{
    <div class="col-6">
        <a style="font-weight:500" class="btn btn-success w-18" asp-action="Create">
            <i class="fas fa-plus"></i> &nbsp; Add Assignment
        </a>
    </div>
}


<!--Load the AJAX API-->
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    //SOURCE: https://developers.google.com/chart/interactive/docs/quick_start
    // Load the Visualization API and the corechart package.
    google.charts.load('current', { 'packages': ['corechart'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawChart);

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawChart() {

        // Create the data table.


        var jsScoreList = new Array();

        @if(classTotalGrades is not null)
            {
                @foreach (var num in classTotalGrades)
                {
                    @:jsScoreList.push(@num);
                }
            }

        let numAs = 0;
        let numAmins = 0;
        let numBplus = 0;
        let numBs = 0;
        let numBmins = 0;
        let numCplus = 0;
        let numCs = 0;
        let numCmins = 0;
        let numDplus = 0;
        let numDs = 0;
        let numDmins = 0;
        let numFs = 0;
        
        let colorA = '';
        let colorAmins = '';
        let colorBplus = '';
        let colorB = '';
        let colorBmins = '';
        let colorCplus = '';
        let colorC = '';
        let colorCmins = '';
        let colorDplus = '';
        let colorD = '';
        let colorDmins = '';
        let colorF = '';

        for (let i = 0; i < jsScoreList.length; i++) {
            let letterGrade = jsScoreList[i];
            if (letterGrade < 60) {
                numFs++;
            } else if (letterGrade >= 60 && letterGrade < 64) {
                numDmins++;
            } else if (letterGrade >= 64 && letterGrade < 67) {
                numDs++;
            } else if (letterGrade >= 67 && letterGrade < 70) {
                numDplus++;
            } else if (letterGrade >= 70 && letterGrade < 74) {
                numCmins++;
            } else if (letterGrade >= 74 && letterGrade < 77) {
                numCs++;
            } else if (letterGrade >= 77 && letterGrade < 80) {
                numCplus++;
            } else if (letterGrade >= 80 && letterGrade < 84) {
                numBmins++;
            } else if (letterGrade >= 84 && letterGrade < 87) {
                numBs++;
            } else if (letterGrade >= 87 && letterGrade < 90) {
                numBplus++;
            } else if (letterGrade >= 90 && letterGrade < 94) {
                numAmins++;
            } else if (letterGrade >= 94) {
                numAs++;
            }
        }


       @if (((await UserManager.GetUserAsync(User)).UserType == "S"))
       {
           if (userTotalGrade < 60)
           {
               @:colorF = 'green';
           }
           else if (userTotalGrade >= 60 && userTotalGrade < 64)
           {
               @:colorDmins = 'green';
           }
           else if (userTotalGrade >= 64 && userTotalGrade < 67)
           {
               @:colorD = 'green';
           }
           else if (userTotalGrade >= 67 && userTotalGrade < 70)
           {
               @:colorDplus = 'green';
           }
           else if (userTotalGrade >= 70 && userTotalGrade < 74)
           {
               @:colorCmins = 'green';
           }
           else if (userTotalGrade >= 74 && userTotalGrade < 77)
           {
               @:colorC = 'green';
           }
           else if (userTotalGrade >= 77 && userTotalGrade < 80)
           {
               @:colorCplus = 'green';
           }
           else if (userTotalGrade >= 80 && userTotalGrade < 84)
           {
               @:colorBmins = 'green';
           }
           else if (userTotalGrade >= 84 && userTotalGrade < 87)
           {
               @:colorB = 'green';
           }
           else if (userTotalGrade >= 87 && userTotalGrade < 90)
           {
               @:colorBplus = 'green';
           }
           else if (userTotalGrade >= 90 && userTotalGrade < 94)
           {
               @:colorAmins = 'green';
           }
           else if (userTotalGrade >= 90)
           {
               @:colorA = 'green';
           }
       }

        var data = new google.visualization.arrayToDataTable([
            ['Letter Grade', 'Number of Students', { role: 'style' }],
            ['F', numFs, colorF],
            ['D-', numDmins, colorDmins],
            ['D', numDs, colorD],
            ['D+', numDplus, colorDplus],
            ['C-', numCmins, colorCmins],
            ['C', numCs, colorC],
            ['C+', numCplus, colorCplus],
            ['B-', numBmins, colorBmins],
            ['B', numBs, colorB],
            ['B+', numBplus, colorBplus],
            ['A-', numAmins, colorAmins],
            ['A', numAs, colorA],
        ]);

        // Set chart options
        var options = {
            'title': 'Overall Class Grades',
            'width': 900,
            'height': 480,
            'legend': 'bottom'
        };

        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
        chart.draw(data, options);
    }
</script>

<!--Draw the assignment histogram here if user is a student.-->

<center>

    @if (((await UserManager.GetUserAsync(User)).UserType == "S"))
    {
        <h5 class="justify-content-center">Your score bracket is highlighted in green.</h5>
    }
    <div id="chart_div"></div>
</center>



